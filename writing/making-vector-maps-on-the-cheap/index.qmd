---
title: "Making vector maps on the cheap"
categories: [dataviz, deckgl, mapping, maplibre]
date: 2022-07-10
description: Lessons from visualising tiled climate datasets with Leaflet
draft: true
---



# Background

Let's start with some background.

Slippy maps: any kind of map that can be moved and panned around. The canonical example is Google Maps:

```{=html}
<iframe
  src="https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d15536931.227897573!2d134.30529097358698!3d-28.914131551783523!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sau!4v1660883555306!5m2!1sen!2sau"
  style="width: 100%; height: 400px; border:0;"
  allowfullscreen=""
  loading="lazy"
  referrerpolicy="no-referrer-when-downgrade"></iframe>
```

You can potentially go _anywhere_ on a slippy map. You can zoom in all the way from a global view to your house. That's amazing! But how do we get the whole world into someone's phone without it melting down?

## Tiled maps

The secret to making a slippy map performant - that is, to making it work quickly - is **tiling**. Tiling means that the map is broken up into chunks, or tiles, and those tiles are streamed i, or downloaded to the user, as it starts to come into view.

If you've ever seen squares of map appearing as you move or zoom, you've seen tiles streaming in.

Tiles aren't just of different parts of the world - they're also of different zoom levels. This means that a person can look at the entire world with just one, low-detail tile, but they can then zoom into a street view and get a tile that covers a few blocks with a lot of detail.

<!-- TODO - picture of map panning and network requests for tiles, plus previewing a tile -->


