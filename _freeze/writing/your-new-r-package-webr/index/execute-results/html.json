{
  "hash": "dd9397cef27a914940a414b3f5e7381c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Your new R package? Write a WebR blog post for it\"\ncategories: [tutorial, rstats, webr, quarto]\ndate: 2024-01-19\ndescription: If you can write a blog post, you can let people try your R package out, right in the browser.\nimage: webr-post-banner.jpg\nresources:\n  - webr-post-banner.jpg\nengine: knitr\nfilters:\n  - \"webr\"\nwebr:\n  packages: [\"dplyr\", \"tidyr\", \"tibble\", \"crayon\"]\nformat:\n  html:\n    highlight-style: github-dark\n    css:\n      - \"webr.css\"\n---\n\n\nYour R package is ready to go out into the world? That's great news!\n\nYou're probably thinking about writing a blog post to celebrate the release, to tell everyone how your package works and what they can do with it.\n\nBut what if people could try your package out, _right there inside the blog post_, without installing anything? Not just running the examples that you give them, but modifying them and playing with them?\n\nIf you have a Quarto blog, you can do this right now, thanks to the power of WebR.\n\nIn fact, why don't you give one of my old packages a test run?\n\n## Try it out\n\n```{webr-r}\n#| context: setup\n#| label: install-pkg\nwebr::install(\"collateral\", repos = c(\"https://jimjam-slam.r-universe.dev\"))\n```\n\n```{webr-r}\n#| label: spike-data\n#| context: setup\nmtcars |>\n  tibble::rownames_to_column(var = \"car\") |>\n  tibble::as_tibble() |>\n  dplyr::select(car, cyl, disp, wt) |>\n  # spike some rows in cyl == 4 to make them fail\n  dplyr::mutate(wt = dplyr::case_when(\n    wt < 2 ~ -wt,\n    TRUE ~ wt)) ->\nbad_mtcars\n```\n\nThe package is called `{collateral}`. It's designed to help you catch errors and warnings when you're working on large, grouped datasets.\n\nTo demonstrate, I've taken the famous `mtcars` data set and sabotaged a few of the rows so that they have a negative `wt` column.\n\nTake a look the new dataset by clicking the **Run** button below:\n\n```{webr-r}\n#| label: spike-data\nbad_mtcars\n```\n\nAt first glance, it doesn't look too different from the first few rows.\n\n:::{.callout-tip}\nTry tapping on that textbox and changing the code to `bad_mtcars |> summary()`.\n:::\n\n_Now_ you can see that I've tampered with the `wt` column, making some of its values negative.\n\nThese boxes aren't just displaying code — you can run _any_ R code directly in your browser!\n\n```{webr-r}\n#| label: test-collateral\nlibrary(collateral)\n\n# nest our `bad_mtcars` into groups based on the `cyl`\nbad_mtcars |>\n  tidyr::nest(data = -cyl) ->\nnested_mtcars\n\n# try to take the log of each `wt`... even the negative ones\nnested_mtcars |>\n  mutate(qlog = map_peacefully(data, ~ log(.$wt)))\n```\n\n`{collateral}` lets you run an operation — building a plot, fitting a model, or something more complex — on many groups of data, while identifying any errors or warnings that crop up.\n\nIt's good for people who aren't ready to step up to a full data pipeline framework like [`{targets}`](https://books.ropensci.org/targets) but who find themselves running the same code over and over, solving edge cases in order to get any results at all.\n\nIt's also the sort of package that is best demoed, rather than described. But it's always an uphill push to get someone to install a package locally — a lot of people will just close the blog post and forget the package altogether.\n\nTwo great technologies have come together to let you, or anybody, take an R package for a spin directly in the browser: R-Universe and WebR.\n\n## R code in the browser\n\nThis blog post uses [WebR](https://docs.r-wasm.org/webr/latest/) to run a copy of R directly in your browser as you read it.\n\nIf you've used frameworks like [Shiny](https://www.rstudio.com/products/shiny/) before, you know that it requires a copy of R to be constantly running, or at least _waiting to run_, 24/7 in the cloud somewhere.\n\nWhenever someone flicks a switch, or drags a slider, their browser sends a request off to the cloud to request that a new graphic be made or model be fitted. Keeping that copy of R running all the time isn't always cheap!\n\nWebR does away with all that. The browser, whether it's on Windows or Mac, downloads a copy of R that is safely sandboxed away from the rest of the computer, and the page interacts with that.\n\nWebR can power a whole range of experiences, whether it's a full R-Studio development environment in your browser or something more restrained. But it's also designed for web developers.\n\nJames Balamuta ([@coatless](https://github.com/coatless)) has been working on opening WebR up to regular Quarto users. [`quarto-webr`](https://github.com/coatless/quarto-webr) is the Quarto extension you see above: instead of running R code when an author renders the page and having the results baked in for all users, the code can be run at any time — or even modified — by the _reader_.\n\nThe biggest constraint on WebR initially was that you only had the base R packages. Then the WebR developers set up a version of CRAN exclusively for WebR, so you can install most CRAN packages either by adding them to the post frontmatter or by running `webr::install()`.^[Soon, it'll be even easier: you'll just be able to use `install.packages()` as usual!]\n\nBut if your package isn't on CRAN, how can you demo it?\n\n## R-Universe to the rescue\n\nR-Universe is a less onerous alternative to CRAN. It lets anybody build their own R packages in the cloud, and it does it _automatically_. It now builds versions of your packages that work with WebR, so any R-Universe package can be run with `quarto-webr`.\n\nThese kinds of services that built your code automatically intimidated me for a long time. But R-Universe makes it incredibly simple: you [connect the R-Universe app to your GitHub](https://github.com/apps/r-universe/installations/new), and it creates a place where you can list the R packages you want built (like [this one for me](https://github.com/jimjam-slam/universe/blob/main/packages.json)). They can be your packages, or they can be someone else's (like members of a lab group or team, or dependencies that you rely on).\n\nR-Universe takes care of building the packages any time they receives pushes on GitHub. You just worry about [building the R package](https://r-pkgs.org).\n\n## Setting \n\nUsing `quarto-webr` is a pretty seamless process:\n\n1. Install the extension alongside your blog post by running `quarto add coatless/quarto-webr`\n2. Add the extension to your blog by adding `filters: [\"webr\"]` to your post's frontmatter\n3. Instead of `{r}` code chunks, use `{webr-r}` ones\n\nIf you want to have CRAN packages installed when someone opens the page, the fourth step is to add a `webr` key to your frontmatter, with a list of `packages` below it:\n\n```yaml\nfilters:\n  - \"webr\"\nwebr:\n  packages:\n  - \"dplyr\"\n  - \"tidyr\"\n  - \"purrr\"\n  - \"tibble\"\n  - \"crayon\"\n```\n\nIf you want to install an R-Universe package, you need to use a code chunk to do so:\n\n````yaml\n```{webr-r}\n#| context: setup\nwebr::install(\"collateral\", repos = c(\"https://jimjam-slam.r-universe.dev\"))\n```\n````\n\nThere's a really important property on that code chunk: `context: setup`. If you add this to a WebR code chunk, it'll run automatically when the page opens, without the user doing anything.\n\nThis doesn't just have to be for package installation. For example, [I used it above to create `bad_mtcars`](https://github.com/jimjam-slam/jamesgoldie-dev/tree/main/writing/your-new-r-package-webr), since I didn't want to slow the blog post down with the details of making some sample data.\n\n:::{.callout-note}\nIf you install an R-Universe package, you currently have to install its dependencies manually. For example, I added `crayon`, a dependency of `collateral`, to my frontmatter under `webr.packages`.\n:::\n\n## Downsides\n\n`quarto-webr` isn't an entirely free lunch, although it gets pretty close. A few things to keep in mind:\n\n1. **Your readers have to wait while R and the packages download when they first open the page.** WebR itself is about a 5 MB download — about as big as a photo from a modern phone. Other packages might be a few hundred kB apiece on top of that. Which means that...\n\n2. **Your users will need to wait several seconds for R and the packages to install.** That might be acceptable in a lot of cases, particularly if you can give them something to look at (like a blog post introduction!) in the mean time. In other contexts, it might be unacceptable.\n\n3. **Including private data in your WebR blog post will expose it to users.** An advantage of frameworks like Shiny is that the analysis happens in the cloud, and your users only get the graphic or summary at the end, without seeing, say, individual medical data.\n\nBut there are lot of upsides too! You can get early feedback on a new package, without the hassle of waiting for CRAN submission (you can even set up R-Universe to build from a development branch). You can invite people to _experiment_ with your package, rather than try a single example.\n\nYou can even suggest several options for people to run, using Quarto's tabsets:\n\n:::{.panel-tabset}\n\n## 1. Operate on groups\n\n```{webr-r}\n#| label: operate-groups\nnested_mtcars |>\n  mutate(\n    qlog = map_peacefully(data, ~ log(.$wt)))\n```\n\n## 2. Add messages\n\n```{webr-r}\n#| label: add-messages\nnested_mtcars |>\n  mutate(\n    qlog = map_peacefully(data, ~ log(.$wt)),\n    warn_msg = purrr::map_chr(qlog,\n      \\(x) paste(x$warnings, collapse = \", \")))\n```\n\n:::\n\nThere are a _lot_ of possibilities here for teaching. No worrying about one reader getting an error that you can't reproduce: the WebR environment is the same for everybody. And you still have all the power of the web to make a very tailored learning experience.\n\n:::{.callout-note collapse=\"true\"}\n\n## Yes, it can do plots too\n\nThis post's example with `{collateral}` just has text output, but yes, `quarto-webr` can do plots too! Here's a basic example with base R plotting, but you can install ggplot2 and any of your usual extensions through CRAN or R-Universe, of course!\n\n```{webr-r}\n#| label: plot-demo\nplot(sin, -pi, 2 * pi)\n```\n\n:::\n\nIt's is also a great way to expose open data and encourage people to experiment with it!\n\nI think [`quarto-webr`](https://github.com/coatless/quarto-webr) is going to be pretty rad. The next time you publish an R package, try it out—or write a post to reintroduce people to your old packages!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}